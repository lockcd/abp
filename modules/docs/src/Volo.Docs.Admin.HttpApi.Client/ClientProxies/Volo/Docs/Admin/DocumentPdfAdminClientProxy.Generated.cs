// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Content;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;
using Volo.Docs.Admin.Projects;
using Volo.Docs.Common.Documents;

// ReSharper disable once CheckNamespace
namespace Volo.Docs.Admin;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IDocumentPdfAppService), typeof(DocumentPdfAdminClientProxy))]
public partial class DocumentPdfAdminClientProxy : ClientProxyBase<IDocumentPdfAppService>, IDocumentPdfAppService
{
    public virtual async Task GeneratePdfAsync(DocumentPdfGeneratorInput input)
    {
        await RequestAsync(nameof(GeneratePdfAsync), new ClientProxyRequestTypeValue
        {
            { typeof(DocumentPdfGeneratorInput), input }
        });
    }

    public virtual async Task<PagedResultDto<ProjectPdfFileDto>> GetPdfFilesAsync(GetPdfFilesInput input)
    {
        return await RequestAsync<PagedResultDto<ProjectPdfFileDto>>(nameof(GetPdfFilesAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetPdfFilesInput), input }
        });
    }

    public virtual async Task DeletePdfFileAsync(DeletePdfFileInput input)
    {
        await RequestAsync(nameof(DeletePdfFileAsync), new ClientProxyRequestTypeValue
        {
            { typeof(DeletePdfFileInput), input }
        });
    }

    public virtual async Task<IRemoteStreamContent> DownloadPdfAsync(DocumentPdfGeneratorInput input)
    {
        return await RequestAsync<IRemoteStreamContent>(nameof(DownloadPdfAsync), new ClientProxyRequestTypeValue
        {
            { typeof(DocumentPdfGeneratorInput), input }
        });
    }

    public virtual async Task<bool> ExistsAsync(DocumentPdfGeneratorInput input)
    {
        return await RequestAsync<bool>(nameof(ExistsAsync), new ClientProxyRequestTypeValue
        {
            { typeof(DocumentPdfGeneratorInput), input }
        });
    }
}
